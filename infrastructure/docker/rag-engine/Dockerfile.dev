FROM rust:1.75-bullseye as base

# 安装系统依赖
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    libpq-dev \
    protobuf-compiler \
    cmake \
    build-essential \
    curl \
    && rm -rf /var/lib/apt/lists/*

# 安装 cargo-watch 用于开发热重载
RUN cargo install cargo-watch

# 设置工作目录
WORKDIR /app

# 复制 Cargo 文件
COPY Cargo.toml Cargo.lock ./

# 预构建依赖 (优化构建时间)
RUN mkdir src && \
    echo "fn main() {}" > src/main.rs && \
    echo "// dummy" > src/lib.rs && \
    cargo build --release && \
    rm -rf src

# 复制源代码
COPY . .

# 暴露端口
EXPOSE 8080 9090 8081

# 开发模式启动命令 (使用 cargo-watch 进行热重载)
CMD ["cargo", "watch", "-x", "run --bin rag-engine-server"]

# 生产构建阶段
FROM base as builder

# 构建应用
RUN cargo build --release --bin rag-engine-server

# 生产运行阶段
FROM debian:bullseye-slim as runtime

# 安装运行时依赖
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl1.1 \
    libpq5 \
    && rm -rf /var/lib/apt/lists/*

# 创建应用用户
RUN groupadd -r rag && useradd -r -g rag rag

# 设置工作目录
WORKDIR /app

# 复制编译好的二进制文件
COPY --from=builder /app/target/release/rag-engine-server /app/rag-engine-server

# 复制配置文件
COPY config/ /app/config/

# 设置权限
RUN chown -R rag:rag /app
USER rag

# 暴露端口
EXPOSE 8080 9090 8081

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8081/health || exit 1

# 启动命令
CMD ["./rag-engine-server"]